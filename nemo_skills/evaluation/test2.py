x = {"generation": "turn number - int(number)\n\n\ndef truncate_number_to_int(number: float) -> int:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the integer part of the number.\n\t>>> truncate_number_to_int(3.5)\n\t3\n\t\"\"\"\n\treturn int(number)\n\n\ndef truncate_number_to_", "error_message": "<not_executed>", "task_id": "RandomSpanInfilling/HumanEval/2/7", "entry_point": "truncate_number", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    re", "suffix": " % 1.0\n", "canonical_solution": "turn number",
     "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "question": "\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\tre", "input_prompt": "<s>\u2581<PRE>\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\tre\u2581<SUF> % 1.0\n\u2581<MID>", "completion": "turn number - int(number)\n\n", "result": "failed: unindent does not match any outer indentation level (<string>, line 14)", "passed": False}
y = {"generation": "mber - int(number)\n\n\ndef truncate_number_to_int(number: float) -> int:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the integer part of the number.\n\t>>> truncate_number_to_int(3.5)\n\t3\n\t\"\"\"\n\treturn int(number)\n\n\ndef truncate_number_to_", "error_message": "<not_executed>", "task_id": "RandomSpanInfilling/HumanEval/2/9", "entry_point": "truncate_number", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return nu", "suffix": " % 1.0\n", "canonical_solution": "mber",
     "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "question": "\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\treturn nu", "input_prompt": "<s>\u2581<PRE>\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\treturn nu\u2581<SUF> % 1.0\n\u2581<MID>", "completion": "mber - int(number)\n\n", "result": "failed: unindent does not match any outer indentation level (<string>, line 14)", "passed": False}
# print(x["question"])
print("**"*20)
print(x["input_prompt"])
print("**"*20)
print(x["generation"])

# print(repr(x["generation"]))
print("**"*20)
print(x["suffix"])
# print(x["task_id"])
print("**"*20)
# print(repr(x["completion"]))
print(x["completion"])
print("**"*10 + "Canonical Solution" + "**"*10)
print(x["canonical_solution"])
# print(len(x["canonical_solution"].split("\n")))
# print("**"*20)
# full_code = x["question"] + x["completion"] + x["suffix"] + \
#     "\n" + x["test"] + "\n" + f"check({x['entry_point']})"
# print(full_code)
